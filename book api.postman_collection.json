{
	"info": {
		"_postman_id": "f99c83fc-0c61-4a81-b71f-e884e793736e",
		"name": "book api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "create account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('create account successfully', () => {\r",
									"    const {data} = pm.response.json()\r",
									"    pm.environment.set('username', data.username)\r",
									"    pm.environment.set('password', data.password)\r",
									"    pm.response.to.have.status(201)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"hieu\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user/create",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.test('login successfully', () => {\r",
									"        const { data } = pm.response.json()\r",
									"        pm.environment.set('token', data.token)\r",
									"    })\r",
									"} catch (e) {\r",
									"    pm.test('FAIL', () => { throw new Error(e.message) })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "book",
			"item": [
				{
					"name": "create book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(201)\r",
									"    pm.test('create book successfully')\r",
									"    const {data} = pm.response.json()\r",
									"    pm.environment.set('id', data._id)\r",
									"} catch(e) {\r",
									"    pm.test('FAIL', () => {throw new Error(e.message)})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookName\": \"dia ly\",\r\n    \"title\": \"dia ly\",\r\n    \"author\": \"a\",\r\n    \"price\":10000,\r\n    \"quantity\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/book/addnew",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"book",
								"addnew"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.test('get all book successfully')\r",
									"} catch(e) {\r",
									"    pm.test('FAIL', () => {throw new Error(e.message)})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/book",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "get book by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.test('find book by id successfully')\r",
									"} catch(e) {\r",
									"    pm.test('FAIL', () => {throw new Error(e.message)})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/book/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"book",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.test('update successfully')\r",
									"} catch(e) {\r",
									"    pm.test('FAIL', () => {throw new Error(e.message)})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookName\": \"dia ly 3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/book/update/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"book",
								"update",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"try {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.test('delete successfully')\r",
									"} catch(e) {\r",
									"    pm.test('FAIL', () => {throw new Error(e.message)})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/book/delete/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"book",
								"delete",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}